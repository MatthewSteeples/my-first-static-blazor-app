@page "/settings"
@using BlazorApp.Shared
@using BlazorApp.Client.Services
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Regular = Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>

<p>Manage your application settings and data import/export options.</p>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Data Management</h5>
            </div>
            <div class="card-body">
                <p>Export your tracked items or import data from a file.</p>
                <div class="d-flex gap-2">
                    <BlazorApp.Client.Components.Export />
                    <a href="/import" class="btn btn-success">Import Data</a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Notification Configuration</h5>
            </div>
            <div class="card-body">
                <p>Configure notification settings for your tracked items.</p>
                
                @if (NotificationSupported)
                {
                    <div class="notification-status mb-3">
                        @if (NotificationPermission == "granted")
                        {
                            <div class="d-flex align-items-center mb-2">
                                <FluentIcon Value="@(new Regular.Size24.CheckmarkCircle())" Color="@Color.Success" />
                                <span class="ms-2">Notifications enabled</span>
                            </div>
                            <p class="text-muted small">You will receive reminders when it's time to take your medication.</p>
                        }
                        else if (NotificationPermission == "denied")
                        {
                            <div class="d-flex align-items-center mb-2">
                                <FluentIcon Value="@(new Regular.Size24.AlertOff())" Color="@Color.Warning" />
                                <span class="ms-2">Notifications denied</span>
                            </div>
                            <p class="text-muted small">Check browser settings to enable notifications for this site.</p>
                        }
                        else if (NotificationPermission != "unsupported")
                        {
                            <FluentButton Appearance="Appearance.Outline" OnClick="@(async () => await RequestNotificationPermission())">
                                <FluentIcon Value="@(new Regular.Size24.Alert())" />
                                Enable notifications
                            </FluentButton>
                            <p class="text-muted small mt-2">Enable notifications to receive reminders for your tracked items with intervals.</p>
                        }
                    </div>
                }
                else
                {
                    <div class="d-flex align-items-center mb-2">
                        <FluentIcon Value="@(new Regular.Size24.Warning())" Color="@Color.Error" />
                        <span class="ms-2">Notifications not supported</span>
                    </div>
                    <p class="text-muted small">Your browser doesn't support notifications.</p>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5>Notification Status</h5>
            </div>
            <div class="card-body">
                <p>Check your notification and background sync capabilities.</p>
                
                <div class="mb-3">
                    <h6 class="fw-bold">Notifications</h6>
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Support:</span>
                        <span class="badge @GetStatusBadgeClass(NotificationSupported, "supported")">
                            @(NotificationSupported ? "Supported" : "Not Supported")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-1">
                        <span>Permission:</span>
                        <span class="badge @GetPermissionBadgeClass(NotificationPermission)">
                            @GetPermissionDisplayText(NotificationPermission)
                        </span>
                    </div>
                </div>

                <div class="mb-3">
                    <h6 class="fw-bold">Background Sync</h6>
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Support:</span>
                        <span class="badge @GetStatusBadgeClass(BackgroundSyncSupported, "supported")">
                            @(BackgroundSyncSupported ? "Supported" : "Not Supported")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-1">
                        <span>Permission:</span>
                        <span class="badge @GetPermissionBadgeClass(BackgroundSyncPermission)">
                            @GetPermissionDisplayText(BackgroundSyncPermission)
                        </span>
                    </div>
                </div>

                @if (IsLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2">Checking status...</span>
                    </div>
                }
                else
                {
                    <button class="btn btn-primary btn-sm" @onclick="RefreshStatus">
                        <span class="bi bi-arrow-clockwise" aria-hidden="true"></span> Refresh Status
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5>Active Notification Registrations</h5>
            </div>
            <div class="card-body">
                <p>Currently registered background sync notifications for your tracked items.</p>
                
                @if (IsLoadingRegistrations)
                {
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2">Loading registrations...</span>
                    </div>
                }
                else if (RegisteredItems.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Item Name</th>
                                    <th>Registration Tag</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var registration in RegisteredItems)
                                {
                                    <tr>
                                        <td>
                                            @if (registration.Item != null)
                                            {
                                                <strong>@registration.Item.Name</strong>
                                            }
                                            else
                                            {
                                                <em class="text-muted">Unknown Item (ID: @registration.ItemId)</em>
                                            }
                                        </td>
                                        <td>
                                            <code>@registration.Tag</code>
                                        </td>
                                        <td>
                                            @if (registration.Item != null)
                                            {
                                                <a href="/edit/@registration.Item.Id" class="btn btn-sm btn-outline-primary">
                                                    <span class="bi bi-pencil" aria-hidden="true"></span> Edit
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Item not found</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <span class="bi bi-info-circle" aria-hidden="true"></span>
                        No active notification registrations found. Create tracked items with intervals and enable notifications to see them here.
                    </div>
                }
                
                <button class="btn btn-secondary btn-sm mt-2" @onclick="RefreshRegistrations">
                    <span class="bi bi-arrow-clockwise" aria-hidden="true"></span> Refresh Registrations
                </button>
            </div>
        </div>
    </div>
</div>

<div class="mt-4">
    <a href="/" class="btn btn-secondary">
        <span class="bi bi-arrow-left" aria-hidden="true"></span> Back to Home
    </a>
</div>

@code {
    private bool NotificationSupported = false;
    private string NotificationPermission = "unknown";
    private bool BackgroundSyncSupported = false;
    private string BackgroundSyncPermission = "unknown";
    private bool IsLoading = true;
    private bool IsLoadingRegistrations = false;
    private List<NotificationRegistration> RegisteredItems = new();

    public class NotificationRegistration
    {
        public string Tag { get; set; } = "";
        public string ItemId { get; set; } = "";
        public TrackedItem? Item { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadStatus();
        await LoadRegistrations();
    }

    private async Task LoadStatus()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            NotificationSupported = await NotificationService.IsNotificationSupported();
            NotificationPermission = await NotificationService.GetPermissionStatus();
            BackgroundSyncSupported = await NotificationService.IsPeriodicBackgroundSyncSupported();
            BackgroundSyncPermission = await NotificationService.GetPBSPermissionStatus();
        }
        catch (Exception)
        {
            // Handle errors gracefully - keep default values
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRegistrations()
    {
        IsLoadingRegistrations = true;
        StateHasChanged();

        try
        {
            // Get all registered sync tags
            var tags = await NotificationService.GetRegisteredTags();
            
            // Load all tracked items
            var allItems = new List<TrackedItem>();
            var keys = (await localStorage.KeysAsync()).Where(a => a.StartsWith(nameof(TrackedItem)));
            foreach (var key in keys)
            {
                var item = await localStorage.GetItemAsync<TrackedItem>(key);
                if (item != null)
                    allItems.Add(item);
            }

            // Parse medication reminder tags and match with items
            RegisteredItems.Clear();
            foreach (var tag in tags)
            {
                if (tag.StartsWith("medication-reminder-"))
                {
                    var itemIdString = tag.Substring("medication-reminder-".Length);
                    if (Guid.TryParse(itemIdString, out var itemId))
                    {
                        var item = allItems.FirstOrDefault(i => i.Id == itemId);
                        RegisteredItems.Add(new NotificationRegistration
                        {
                            Tag = tag,
                            ItemId = itemIdString,
                            Item = item
                        });
                    }
                }
            }
        }
        catch (Exception)
        {
            // Handle errors gracefully - keep empty list
        }
        finally
        {
            IsLoadingRegistrations = false;
            StateHasChanged();
        }
    }

    private async Task RefreshStatus()
    {
        await LoadStatus();
    }

    private async Task RefreshRegistrations()
    {
        await LoadRegistrations();
    }
    
    // Request notification permission when user clicks the button
    private async Task RequestNotificationPermission()
    {
        NotificationPermission = await NotificationService.RequestPermission();
        StateHasChanged();
    }

    private string GetStatusBadgeClass(bool isSupported, string feature)
    {
        return isSupported ? "bg-success" : "bg-danger";
    }

    private string GetPermissionBadgeClass(string permission)
    {
        return permission.ToLower() switch
        {
            "granted" => "bg-success",
            "denied" => "bg-danger",
            "default" or "prompt" => "bg-warning",
            "unsupported" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetPermissionDisplayText(string permission)
    {
        return permission.ToLower() switch
        {
            "granted" => "Granted",
            "denied" => "Denied",
            "default" => "Default",
            "prompt" => "Prompt",
            "unsupported" => "Unsupported",
            "unknown" => "Unknown",
            _ => permission
        };
    }
}