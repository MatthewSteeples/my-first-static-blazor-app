@page "/settings"
@using BlazorApp.Shared
@using Microsoft.FluentUI.AspNetCore.Components

@inject IJSRuntime JS

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>

<h2>Data Management</h2>

<p>
    <BlazorApp.Client.Components.Export />
    <a href="/import" class="btn btn-success">Import Data</a>
</p>

<h2>Progressive Web App</h2>

<p>
    <button class="btn btn-primary" @onclick="InstallPWA" style="@installButtonStyle">Install App</button>
</p>

@code {
    private string installButtonStyle = "display: none;";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupPWAInstall", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void ShowInstallButton()
    {
        installButtonStyle = "display: block;";
        StateHasChanged();
    }

    [JSInvokable]
    public void HideInstallButton()
    {
        installButtonStyle = "display: none;";
        StateHasChanged();
    }

    private async Task InstallPWA()
    {
        await JS.InvokeVoidAsync("installPWA");
    }

    public void Dispose()
    {
        // Clean up if needed
    }
}

<script>
    let deferredPrompt;
    let settingsPageRef;

    window.setupPWAInstall = (pageRef) => {
        settingsPageRef = pageRef;
        
        // Check if app is already installed or running in standalone mode
        if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true) {
            return; // Keep button hidden if already installed
        }

        // Listen for the beforeinstallprompt event
        window.addEventListener('beforeinstallprompt', (e) => {
            // Prevent Chrome 67 and earlier from automatically showing the prompt
            e.preventDefault();
            // Stash the event so it can be triggered later
            deferredPrompt = e;
            
            // Show the install button
            if (settingsPageRef) {
                settingsPageRef.invokeMethodAsync('ShowInstallButton');
            }
        });

        // Listen for the appinstalled event
        window.addEventListener('appinstalled', (evt) => {
            console.log('PWA was installed');
            if (settingsPageRef) {
                settingsPageRef.invokeMethodAsync('HideInstallButton');
            }
        });
    };

    window.installPWA = async () => {
        if (deferredPrompt) {
            // Show the prompt
            deferredPrompt.prompt();
            // Wait for the user to respond to the prompt
            const { outcome } = await deferredPrompt.userChoice;
            console.log(`User response to the install prompt: ${outcome}`);
            // We no longer need the prompt. Clear it up.
            deferredPrompt = null;
            
            if (settingsPageRef) {
                settingsPageRef.invokeMethodAsync('HideInstallButton');
            }
        } else {
            alert('This app is already installed or cannot be installed on this device.');
        }
    };
</script>