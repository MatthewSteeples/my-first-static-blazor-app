@page "/edit/{id:guid}"
@using BlazorApp.Client.Components
@using BlazorApp.Client.Services
@using BlazorApp.Shared
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@inject NavigationManager Navigation

@inject Blazored.LocalStorage.ILocalStorageService localStorage

<EditForm Model="Item" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <FluentLabel>
        Name:
        <InputText @bind-Value="Item.Name" />
    </FluentLabel>

    <FluentLabel>
        Default Stock Usage:
        <InputNumber @bind-Value="Item.DefaultStockUsage" />
    </FluentLabel>

    @if (Item.PastOccurrences.Any())
    {
        <h2>Past Occurrences:</h2>

        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Stock Used</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var occurrence in Item.PastOccurrences.OrderByDescending(a => a.ActualTimestamp).Take(showHistoryCount))
                {
                    <tr>
                        <td>
                            <FluentDatePicker Value="@occurrence.ActualTimestamp.ToLocalTime()" ValueChanged="@(e => occurrence.ActualTimestamp = e.GetValueOrDefault().ToUniversalTime())" />
                        </td>
                        <td>
                            <FluentTimePicker Value="@occurrence.ActualTimestamp.ToLocalTime()" ValueChanged="@(e => occurrence.ActualTimestamp = e.GetValueOrDefault().ToUniversalTime())" />
                        </td>
                        <td>
                            <InputNumber @bind-Value="occurrence.StockUsed" />
                        </td>
                        <td>
                            <FluentIcon Value="@(new Size24.Delete())" OnClick="() => Item.PastOccurrences.Remove(occurrence)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button type="button" class="btn btn-primary" @onclick="() => showHistoryCount += 5">Show More</button>
    }

    <h2>Limits: </h2>
    <p>What kind of limits do you want to set on this item. <FluentIcon Id="limitTooltip" Icon="Size24.Info" /> </p>

    <FluentTooltip Anchor="limitTooltip">
        <strong>For example</strong>
        <p>if you are tracking Paracetamol then you want to add 2 limits:</p>
        <ul>
            <li>1 every 4 hours</li>
            <li>4 every 24 hours</li>
        </ul>
    </FluentTooltip>

    @foreach (var target in Item.Targets)
    {
        <p>
            <TargetEditor Target="target" />
            <FluentIcon Value="@(new Size24.Delete())" OnClick="() => Item.Targets.Remove(target)" />
        </p>
    }

    <button type="button" class="btn btn-primary" @onclick="() => Item.Targets.Add(new Target())">Add Target</button>

    <h2>Stock Acquisitions:</h2>
    @if (Item.StockAcquisitions.Any())
    {
        <table>
            <thead>
                <tr>
                    <th>Date Acquired</th>
                    <th>Quantity</th>
                    <th>Note</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var acquisition in Item.StockAcquisitions)
                {
                    <tr>
                        <td>
                            <FluentDatePicker Value="@acquisition.DateAcquired.ToLocalTime()" ValueChanged="@(e => acquisition.DateAcquired = e.GetValueOrDefault().ToUniversalTime())" />
                        </td>
                        <td>
                            <InputNumber @bind-Value="acquisition.Quantity" />
                        </td>
                        <td>
                            <InputText @bind-Value="acquisition.Note" />
                        </td>
                        <td>
                            <FluentIcon Value="@(new Size24.Delete())" OnClick="() => Item.StockAcquisitions.Remove(acquisition)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Items are not being tracked</p>
    }

    <button type="button" class="btn btn-primary" @onclick="() => Item.StockAcquisitions.Add(new StockAcquisition { DateAcquired = DateTime.UtcNow })">Add Stock Acquisition</button>

    <p class="mt-5"> 
        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
        <button type="button" @onclick="Delete" class="btn btn-danger">Delete</button>
    </p>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    public TrackedItem Item { get; set; } = new TrackedItem(); //Needs to be "new" otherwise the form complains as it loads before the data is loaded

    private int showHistoryCount = 5;

    protected override async Task OnInitializedAsync()
    {
        var loadedItem = await localStorage.GetItemAsync<TrackedItem>(nameof(TrackedItem) + Id);

        if (loadedItem != null)
        {
            Item = loadedItem;
        }
        else
        {
            Item.Id = Id;
        }
    }

    async void Save()
    {
        //Reset all safety times in case the Targets have changed
        var occurrences = Item.PastOccurrences;
        Item.PastOccurrences = new List<Occurrence>();

        foreach (var occurrence in occurrences)
        {
            Item.AddOccurrence(occurrence.ActualTimestamp, occurrence.StockUsed);
        }

        await TrackedItemStorageHelper.SaveTrackedItemWithArchivingAsync(localStorage, Item);
        Navigation.NavigateTo("/");
    }

    void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    async void Delete()
    {
        await localStorage.RemoveItemAsync(nameof(TrackedItem) + Item.Id);
        Navigation.NavigateTo("/");
    }
}
