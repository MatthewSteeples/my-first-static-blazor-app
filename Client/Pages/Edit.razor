@page "/edit/{id:guid}"
@using BlazorApp.Client.Components
@using BlazorApp.Shared
@using Microsoft.FluentUI.AspNetCore.Components

@inject NavigationManager Navigation

@inject Blazored.LocalStorage.ILocalStorageService localStorage

<EditForm Model="Item" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label>
        Name:
        <InputText @bind-Value="Item.Name" />
    </label>

    <p>Past Occurrences:</p>

    @foreach (var occurrence in Item.PastOccurrences.Reverse())
    {
        <p>
            <FluentDatePicker Value="@occurrence.ActualTimestamp" ValueChanged="@(e => UpdateOccurrence(occurrence, e.GetValueOrDefault()))" />
            <FluentTimePicker Value="@occurrence.ActualTimestamp" ValueChanged="@(e => UpdateOccurrence(occurrence, e.GetValueOrDefault()))" />
            <FluentIcon Value="@(new Icons.Regular.Size24.Delete())" OnClick="() => Item.PastOccurrences.Remove(occurrence)" />
        </p>
    }

    <p>Targets: </p>
    @foreach (var target in Item.Targets)
    {
        <p>
            <TargetEditor Target="target" />
            <FluentIcon Value="@(new Icons.Regular.Size24.Delete())" OnClick="() => Item.Targets.Remove(target)" />
        </p>
    }

    <button type="button" class="btn btn-primary" @onclick="() => Item.Targets.Add(new Target())">Add Target</button>

    <p>
        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
        <button type="button" @onclick="Delete" class="btn btn-danger">Delete</button>
    </p>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    public TrackedItem Item { get; set; } = new TrackedItem(); //Needs to be "new" otherwise the form complains as it loads before the data is loaded

    protected override async Task OnInitializedAsync()
    {
        var loadedItem = await localStorage.GetItemAsync<TrackedItem>(nameof(TrackedItem) + Id);

        if (loadedItem != null)
        {
            Item = loadedItem;
        }
        else
        {
            Item.Id = Id;
        }
    }

    void UpdateOccurrence(Occurrence occurrence, DateTime newTimestamp)
    {
        Item.PastOccurrences.Remove(occurrence);
        Item.AddOccurrence(newTimestamp);
    }

    async void Save()
    {
        //Reset all safety times in case the Targets have changed
        var occurrences = Item.PastOccurrences;
        Item.PastOccurrences = new List<Occurrence>();

        foreach (var occurrence in occurrences)
        {
            Item.AddOccurrence(occurrence.ActualTimestamp);
        }

        await localStorage.SetItemAsync(nameof(TrackedItem) + Item.Id, Item);
        Navigation.NavigateTo("/");
    }

    void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    async void Delete()
    {
        await localStorage.RemoveItemAsync(nameof(TrackedItem) + Item.Id);
        Navigation.NavigateTo("/");
    }
}
