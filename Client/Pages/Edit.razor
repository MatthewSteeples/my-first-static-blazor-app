@page "/edit/{id:guid}"
@using BlazorApp.Client.Components
@using BlazorApp.Shared
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@inject NavigationManager Navigation

@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="form-container">
    <FluentCard>
        <EditForm Model="Item" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <FluentLabel For="name" class="input-group">
                    <div>Name:</div>
                    <FluentTextField Id="name" @bind-Value="Item.Name" Placeholder="Enter item name" />
                </FluentLabel>
            </div>

            <div class="form-group">
                <FluentLabel For="stockUsage" class="input-group">
                    <div>Default Stock Usage:</div>
                    <FluentNumberField Id="stockUsage" @bind-Value="Item.DefaultStockUsage" Placeholder="Enter default amount" />
                </FluentLabel>
            </div>

            @if (Item.PastOccurrences.Any())
            {
                <div class="section">
                    <h2 class="section-title">Past Occurrences</h2>
                    <div class="table-responsive">
                        <table>
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Time</th>
                                    <th>Stock Used</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var occurrence in Item.PastOccurrences.OrderByDescending(a => a.ActualTimestamp).Take(showHistoryCount))
                                {
                                    <tr>
                                        <td>
                                            <FluentDatePicker Value="@occurrence.ActualTimestamp.ToLocalTime()" ValueChanged="@(e => UpdateDateTime(e, (dt) => occurrence.ActualTimestamp = dt))" />
                                        </td>
                                        <td>
                                            <FluentTimePicker Value="@occurrence.ActualTimestamp.ToLocalTime()" ValueChanged="@(e => UpdateDateTime(e, (dt) => occurrence.ActualTimestamp = dt))" />
                                        </td>
                                        <td>
                                            <FluentNumberField @bind-Value="occurrence.StockUsed" />
                                        </td>
                                        <td>
                                            <div class="action-button">
                                                <FluentIcon Value="@(new Size24.Delete())" OnClick="() => Item.PastOccurrences.Remove(occurrence)" />
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="button-group">
                        <FluentButton Appearance="Appearance.Accent" @onclick="() => showHistoryCount += 5">Show More</FluentButton>
                    </div>
                </div>
            }

            <div class="section">
                <h2 class="section-title">Limits</h2>
                <p>
                    What kind of limits do you want to set on this item.
                    <FluentIcon Id="limitTooltip" Icon="Size24.Info" />
                </p>

                <FluentTooltip Anchor="limitTooltip">
                    <strong>For example</strong>
                    <p>if you are tracking Paracetamol then you want to add 2 limits:</p>
                    <ul>
                        <li>1 every 4 hours</li>
                        <li>4 every 24 hours</li>
                    </ul>
                </FluentTooltip>

                <div class="targets-container">
                    @foreach (var target in Item.Targets)
                    {
                        <div class="target-item">
                            <TargetEditor Target="target" />
                            <div class="action-button">
                                <FluentIcon Value="@(new Size24.Delete())" OnClick="() => Item.Targets.Remove(target)" />
                            </div>
                        </div>
                    }
                </div>

                <div class="button-group">
                    <FluentButton Appearance="Appearance.Accent" @onclick="() => Item.Targets.Add(new Target())">
                        <FluentIcon Value="@(new Size24.Add())" Slot="start" />
                        Add Target
                    </FluentButton>
                </div>
            </div>

            <div class="section">
                <h2 class="section-title">Stock Acquisitions</h2>
                
                @if (Item.StockAcquisitions.Any())
                {
                    <div class="table-responsive">
                        <table>
                            <thead>
                                <tr>
                                    <th>Date Acquired</th>
                                    <th>Quantity</th>
                                    <th>Note</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var acquisition in Item.StockAcquisitions)
                                {
                                    <tr>
                                        <td>
                                            <FluentDatePicker Value="@acquisition.DateAcquired.ToLocalTime()" ValueChanged="@(e => UpdateDateTime(e, (dt) => acquisition.DateAcquired = dt))" />
                                        </td>
                                        <td>
                                            <FluentNumberField @bind-Value="acquisition.Quantity" />
                                        </td>
                                        <td>
                                            <FluentTextField @bind-Value="acquisition.Note" />
                                        </td>
                                        <td>
                                            <div class="action-button">
                                                <FluentIcon Value="@(new Size24.Delete())" OnClick="() => Item.StockAcquisitions.Remove(acquisition)" />
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p>Items are not being tracked</p>
                }

                <div class="button-group">
                    <FluentButton Appearance="Appearance.Accent" @onclick="() => Item.StockAcquisitions.Add(new StockAcquisition { DateAcquired = DateTime.UtcNow })">
                        <FluentIcon Value="@(new Size24.Add())" Slot="start" />
                        Add Stock Acquisition
                    </FluentButton>
                </div>
            </div>

            <div class="button-group">
                <FluentButton Type="ButtonType.Submit" style="background-color: #107C10; color: white; border-color: #107C10;">Save</FluentButton>
                <FluentButton @onclick="Cancel" Appearance="Appearance.Neutral">Cancel</FluentButton>
                <FluentButton @onclick="Delete" style="background-color: #d32f2f; color: white; border-color: #d32f2f;">Delete</FluentButton>
            </div>
        </EditForm>
    </FluentCard>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    public TrackedItem Item { get; set; } = new TrackedItem(); //Needs to be "new" otherwise the form complains as it loads before the data is loaded

    private int showHistoryCount = 5;

    private void UpdateDateTime(DateTime? value, Action<DateTime> updateAction)
    {
        if (value.HasValue)
        {
            updateAction(value.Value.ToUniversalTime());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var loadedItem = await localStorage.GetItemAsync<TrackedItem>(nameof(TrackedItem) + Id);

        if (loadedItem != null)
        {
            Item = loadedItem;
        }
        else
        {
            Item.Id = Id;
        }
    }

    async void Save()
    {
        //Reset all safety times in case the Targets have changed
        var occurrences = Item.PastOccurrences;
        Item.PastOccurrences = new List<Occurrence>();

        foreach (var occurrence in occurrences)
        {
            Item.AddOccurrence(occurrence.ActualTimestamp, occurrence.StockUsed);
        }

        await localStorage.SetItemAsync(nameof(TrackedItem) + Item.Id, Item);
        Navigation.NavigateTo("/");
    }

    void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    async void Delete()
    {
        await localStorage.RemoveItemAsync(nameof(TrackedItem) + Item.Id);
        Navigation.NavigateTo("/");
    }
}
