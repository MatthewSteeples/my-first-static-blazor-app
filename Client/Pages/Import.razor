@page "/import"
@using System.IO
@using BlazorApp.Shared
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using BlazorApp.Client.Services
@using System.Linq

@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@inject IBrowserIdentityService identityService

<PageTitle>Import Data</PageTitle>

<h1>Import TrackedItems</h1>

<p>Select a JSON file containing TrackedItem data to import into the application.</p>

<script>
    window.readUploadedFileAsText = async (inputElement) => {
        const file = inputElement.files[0];
        if (!file) {
            return null;
        }
        
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e);
            reader.readAsText(file);
        });
    };
</script>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Select File to Import</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="fileInput" class="form-label">Choose JSON file:</label>
                    <input type="file" class="form-control" id="fileInput" accept=".json" @ref="fileInput" />
                </div>
                <button class="btn btn-success" @onclick="ImportFileAsync" disabled="@showConfirmation">
                    <span class="bi bi-upload" aria-hidden="true"></span> Import Data
                </button>
                
                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="alert @alertClass mt-3" role="alert">
                        @statusMessage
                    </div>
                }
                
                @if (showConfirmation)
                {
                    <div class="alert alert-warning mt-3" role="alert">
                        <h6 class="alert-heading">Identity Confirmation Required</h6>
                        <p>@confirmationMessage</p>
                        <hr>
                        <div class="d-flex gap-2">
                            <button class="btn btn-warning" @onclick="ConfirmImportAsync">
                                <span class="bi bi-check-circle" aria-hidden="true"></span> Continue Import
                            </button>
                            <button class="btn btn-secondary" @onclick="CancelImport">
                                <span class="bi bi-x-circle" aria-hidden="true"></span> Cancel
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Import Instructions</h5>
            </div>
            <div class="card-body">
                <ul>
                    <li>Select a JSON file exported from this application</li>
                    <li>The file can contain an array of TrackedItem objects or the newer format with identity</li>
                    <li>All valid items will be imported into your local storage</li>
                    <li>If identity is included, only the keys will be updated (ID is preserved)</li>
                    <li>You will be redirected to the home page after successful import</li>
                </ul>
                <p class="text-muted">
                    <small>
                        <strong>Note:</strong> This will add items to your existing data. 
                        Items with the same ID will be overwritten.
                    </small>
                </p>
            </div>
        </div>
    </div>
</div>

<div class="mt-4">
    <a href="/" class="btn btn-secondary">
        <span class="bi bi-arrow-left" aria-hidden="true"></span> Back to Home
    </a>
    <a href="/Grid" class="btn btn-secondary">
        <span class="bi bi-grid" aria-hidden="true"></span> View Grid
    </a>
</div>

@code {
    private ElementReference fileInput;
    private string statusMessage = "";
    private string alertClass = "";
    private bool showConfirmation = false;
    private string confirmationMessage = "";
    private string fileContentToImport = "";
    private BrowserIdentity? importedIdentity = null;
    private TrackedItem[]? trackedItemsToImport = null;
    
    private async Task ImportFileAsync()
    {
        try
        {
            statusMessage = "";
            alertClass = "";
            showConfirmation = false;
            
            // Read the file content
            var fileContent = await JS.InvokeAsync<string>("readUploadedFileAsText", fileInput);
            
            if (string.IsNullOrEmpty(fileContent))
            {
                ShowError("Please select a file to import.");
                return;
            }
            
            fileContentToImport = fileContent;
            
            // Parse and analyze the file
            var analysisResult = await AnalyzeImportFileAsync(fileContent);
            
            if (!analysisResult.IsValid)
            {
                ShowError(analysisResult.ErrorMessage ?? "Invalid file format.");
                return;
            }
            
            trackedItemsToImport = analysisResult.TrackedItems;
            importedIdentity = analysisResult.ImportedIdentity;
            
            // Check if we need to show confirmation for identity differences
            if (importedIdentity != null)
            {
                var currentIdentity = await identityService.GetIdentityAsync();
                if (currentIdentity != null)
                {
                    var keysDifferent = currentIdentity.PublicKey != importedIdentity.PublicKey || 
                                       currentIdentity.PrivateKey != importedIdentity.PrivateKey;
                    
                    if (keysDifferent)
                    {
                        confirmationMessage = $"Warning: The imported file contains a different identity keypair than your current browser identity. " +
                                            $"Proceeding will update your browser's cryptographic keys while preserving your browser ID ({currentIdentity.Id}). " +
                                            $"Do you want to continue with the import?";
                        showConfirmation = true;
                        return;
                    }
                }
            }
            
            // No confirmation needed, proceed with import
            await PerformImportAsync();
        }
        catch (Exception ex)
        {
            ShowError($"Import failed: {ex.Message}");
        }
    }
    
    private async Task ConfirmImportAsync()
    {
        showConfirmation = false;
        await PerformImportAsync();
    }
    
    private void CancelImport()
    {
        showConfirmation = false;
        fileContentToImport = "";
        trackedItemsToImport = null;
        importedIdentity = null;
        statusMessage = "Import cancelled.";
        alertClass = "alert-warning";
    }
    
    private async Task PerformImportAsync()
    {
        try
        {
            var importedItemsCount = 0;
            var identityMessage = "";
            
            // Import identity if present
            if (importedIdentity != null)
            {
                var currentIdentity = await identityService.GetIdentityAsync();
                if (currentIdentity != null)
                {
                    var keysDifferent = currentIdentity.PublicKey != importedIdentity.PublicKey || 
                                       currentIdentity.PrivateKey != importedIdentity.PrivateKey;
                    
                    if (keysDifferent)
                    {
                        await identityService.UpdateIdentityKeysAsync(importedIdentity.PublicKey, importedIdentity.PrivateKey);
                        identityMessage = "Identity keypair updated.";
                    }
                    else
                    {
                        identityMessage = "Identity keypair matches current identity.";
                    }
                }
                else
                {
                    await identityService.UpdateIdentityKeysAsync(importedIdentity.PublicKey, importedIdentity.PrivateKey);
                    identityMessage = "Identity imported successfully.";
                }
            }
            
            // Import tracked items
            if (trackedItemsToImport != null)
            {
                foreach (var item in trackedItemsToImport)
                {
                    if (item != null && item.Id != Guid.Empty)
                    {
                        var key = $"{nameof(TrackedItem)}{item.Id}";
                        await localStorage.SetItemAsync(key, item);
                        importedItemsCount++;
                    }
                }
            }
            
            var successMessage = $"Successfully imported {importedItemsCount} tracked item(s).";
            if (!string.IsNullOrEmpty(identityMessage))
            {
                successMessage += $" {identityMessage}";
            }
            
            ShowSuccess(successMessage);
            
            // Redirect to home page after a short delay
            await Task.Delay(3000);
            Navigation.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            ShowError($"Import failed: {ex.Message}");
        }
    }
    
    private async Task<ImportAnalysisResult> AnalyzeImportFileAsync(string fileContent)
    {
        try
        {
            // First try parsing as new format
            var document = JsonDocument.Parse(fileContent);
            var root = document.RootElement;
            
            TrackedItem[] trackedItems;
            BrowserIdentity? importedIdentity = null;
            
            // First try to deserialize as new ExportData format
            var exportData = JsonSerializer.Deserialize<ExportData>(fileContent, SerializationContext.Default.ExportData);
            if (exportData != null)
            {
                // New format with ExportData
                importedIdentity = exportData.Identity;
                trackedItems = exportData.TrackedItems
                    .Select(json => JsonSerializer.Deserialize<TrackedItem>(json, SerializationContext.Default.TrackedItem))
                    .OfType<TrackedItem>()
                    .ToArray();
            }
            else if (root.ValueKind == JsonValueKind.Object && 
                root.TryGetProperty("trackedItems", out var trackedItemsElement) && 
                root.TryGetProperty("identity", out var identityElement))
            {
                // Legacy object format with identity and trackedItems
                var trackedItemsJson = trackedItemsElement.GetRawText();
                trackedItems = JsonSerializer.Deserialize<string[]>(trackedItemsJson, SerializationContext.Default.StringArray)?
                    .Select(json => JsonSerializer.Deserialize<TrackedItem>(json, SerializationContext.Default.TrackedItem))
                    .OfType<TrackedItem>()
                    .ToArray() ?? Array.Empty<TrackedItem>();
                
                // Parse identity
                importedIdentity = JsonSerializer.Deserialize<BrowserIdentity>(identityElement.GetRawText(), SerializationContext.Default.BrowserIdentity);
            }
            else if (root.ValueKind == JsonValueKind.Array)
            {
                // Legacy format - array of TrackedItems
                trackedItems = JsonSerializer.Deserialize<TrackedItem[]>(fileContent, SerializationContext.Default.TrackedItemArray) ?? Array.Empty<TrackedItem>();
            }
            else
            {
                return new ImportAnalysisResult { IsValid = false, ErrorMessage = "Invalid file format. Expected array of TrackedItems or object with identity and trackedItems." };
            }
            
            return new ImportAnalysisResult 
            { 
                IsValid = true, 
                TrackedItems = trackedItems,
                ImportedIdentity = importedIdentity
            };
        }
        catch (JsonException ex)
        {
            return new ImportAnalysisResult { IsValid = false, ErrorMessage = $"Failed to parse file: {ex.Message}" };
        }
        catch (Exception ex)
        {
            return new ImportAnalysisResult { IsValid = false, ErrorMessage = $"Failed to analyze file: {ex.Message}" };
        }
    }
    
    private class ImportAnalysisResult
    {
        public bool IsValid { get; set; }
        public string? ErrorMessage { get; set; }
        public TrackedItem[]? TrackedItems { get; set; }
        public BrowserIdentity? ImportedIdentity { get; set; }
    }
    
    private void ShowSuccess(string message)
    {
        statusMessage = message;
        alertClass = "alert-success";
    }
    
    private void ShowError(string message)
    {
        statusMessage = message;
        alertClass = "alert-danger";
    }
}