@page "/import"
@using System.IO
@using BlazorApp.Shared
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components

@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

<PageTitle>Import Data</PageTitle>

<h1>Import TrackedItems</h1>

<p>Select a JSON file containing TrackedItem data to import into the application.</p>

<script>
    window.readUploadedFileAsText = async (inputElement) => {
        const file = inputElement.files[0];
        if (!file) {
            return null;
        }
        
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e);
            reader.readAsText(file);
        });
    };
</script>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Select File to Import</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="fileInput" class="form-label">Choose JSON file:</label>
                    <input type="file" class="form-control" id="fileInput" accept=".json" @ref="fileInput" />
                </div>
                <button class="btn btn-success" @onclick="ImportFileAsync">
                    <span class="bi bi-upload" aria-hidden="true"></span> Import Data
                </button>
                
                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="alert @alertClass mt-3" role="alert">
                        @statusMessage
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Import Instructions</h5>
            </div>
            <div class="card-body">
                <ul>
                    <li>Select a JSON file exported from this application</li>
                    <li>The file should contain an array of TrackedItem objects</li>
                    <li>All valid items will be imported into your local storage</li>
                    <li>You will be redirected to the home page after successful import</li>
                </ul>
                <p class="text-muted">
                    <small>
                        <strong>Note:</strong> This will add items to your existing data. 
                        Items with the same ID will be overwritten.
                    </small>
                </p>
            </div>
        </div>
    </div>
</div>

<div class="mt-4">
    <a href="/" class="btn btn-secondary">
        <span class="bi bi-arrow-left" aria-hidden="true"></span> Back to Home
    </a>
    <a href="/Grid" class="btn btn-secondary">
        <span class="bi bi-grid" aria-hidden="true"></span> View Grid
    </a>
</div>

@code {
    private ElementReference fileInput;
    private string statusMessage = "";
    private string alertClass = "";
    
    private async Task ImportFileAsync()
    {
        try
        {
            statusMessage = "";
            alertClass = "";
            
            // Read the file content
            var fileContent = await JS.InvokeAsync<string>("readUploadedFileAsText", fileInput);
            
            if (string.IsNullOrEmpty(fileContent))
            {
                ShowError("Please select a file to import.");
                return;
            }
            
            // Parse JSON as a generic array first to identify item types
            using var doc = JsonDocument.Parse(fileContent);
            var root = doc.RootElement;
            
            if (root.ValueKind != JsonValueKind.Array)
            {
                ShowError("Invalid file format. Expected an array of items.");
                return;
            }
            
            int importedTrackedItems = 0;
            int importedArchives = 0;
            
            foreach (var element in root.EnumerateArray())
            {
                try
                {
                    // Try to determine if this is a TrackedItem or TrackedItemArchive
                    if (element.TryGetProperty("ArchivedOccurrences", out _) || 
                        element.TryGetProperty("TrackedItemId", out _) ||
                        element.TryGetProperty("ArchiveNumber", out _))
                    {
                        // This is a TrackedItemArchive
                        var archive = JsonSerializer.Deserialize<TrackedItemArchive>(element.GetRawText(), SerializationContext.Default.TrackedItemArchive);
                        if (archive != null && archive.TrackedItemId != Guid.Empty)
                        {
                            var archiveKey = $"TrackedItemArchive{archive.TrackedItemId}-{archive.ArchiveNumber}";
                            await localStorage.SetItemAsync(archiveKey, archive);
                            importedArchives++;
                        }
                    }
                    else
                    {
                        // This is a TrackedItem
                        var item = JsonSerializer.Deserialize<TrackedItem>(element.GetRawText(), SerializationContext.Default.TrackedItem);
                        if (item != null && item.Id != Guid.Empty)
                        {
                            var key = $"{nameof(TrackedItem)}{item.Id}";
                            await localStorage.SetItemAsync(key, item);
                            importedTrackedItems++;
                        }
                    }
                }
                catch (JsonException)
                {
                    // Skip invalid items
                    continue;
                }
            }
            
            if (importedTrackedItems == 0 && importedArchives == 0)
            {
                ShowError("No valid items found in the selected file.");
                return;
            }
            
            var message = $"Successfully imported {importedTrackedItems} tracked item(s)";
            if (importedArchives > 0)
            {
                message += $" and {importedArchives} archive(s)";
            }
            message += ".";
            
            ShowSuccess(message);
            
            // Redirect to home page after a short delay
            await Task.Delay(2000);
            Navigation.NavigateTo("/", forceLoad: true);
        }
        catch (JsonException ex)
        {
            ShowError($"Invalid JSON format: {ex.Message}");
        }
        catch (Exception ex)
        {
            ShowError($"Import failed: {ex.Message}");
        }
    }
    
    private void ShowSuccess(string message)
    {
        statusMessage = message;
        alertClass = "alert-success";
    }
    
    private void ShowError(string message)
    {
        statusMessage = message;
        alertClass = "alert-danger";
    }
}