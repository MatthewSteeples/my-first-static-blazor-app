@page "/"
@using BlazorApp.Shared
@using BlazorApp.Shared.Comparers
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using System.Net.Http.Json

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>Home</PageTitle>

@code {
    private List<TrackedItem> allItems = [];
    private List<TrackedItem> items = [];

    protected override async Task OnInitializedAsync()
    {
        var keys = (await localStorage.KeysAsync()).Where(a => a.StartsWith(nameof(TrackedItem)));

        foreach (var key in keys)
        {
            var item = await localStorage.GetItemAsync<TrackedItem>(key);

            if (item != null)
                allItems.Add(item);
        }

        allItems.Sort(new TrackedItemComparerDescending());

        items = allItems;
    }
}

@if (allItems.Any())
{
    <FluentTextField @oninput=searchChange Placeholder="Search...">
        <FluentIcon Value="@(new Size16.Search())" Color="@Color.Neutral" Slot="end" />
    </FluentTextField>

    if (items.Any())
    {
        <FluentGrid Spacing="6">

            @foreach (var item in items)
            {
                <FluentGridItem Style="min-width: 250px">
                    <BlazorApp.Client.Components.TrackedItemComponent ItemToTrack="@item" />
                </FluentGridItem>
            }

        </FluentGrid>
    }
    else
    {
        <p>No items found.</p>
    }
}
else
{
    <p>No items currently tracked. Click the button below to add a new item.</p>
}

<p>
    <button class="btn btn-primary" @onclick="AddItem">Add New</button>
</p>

<p>
    <a href="/Grid">View Grid</a>
</p>

<p>
    <a href="/settings">Settings</a>
</p>

@code {
    private void searchChange(ChangeEventArgs e)
    {
        var newFilter = e.Value?.ToString();

        searchChange(newFilter);
    }

    private void searchChange(string? newFilter)
    {
        if (newFilter == null)
            return;

        if (_searchFilter == newFilter)
            return;
        
        if (string.IsNullOrEmpty(newFilter))
        {
            items = allItems;
        }
        else if (newFilter.Contains(_searchFilter, StringComparison.OrdinalIgnoreCase))
        {
            items = items.Where(a => a.Name.Contains(newFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            items = allItems.Where(a => a.Name.Contains(newFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        _searchFilter = newFilter;
    }

    private string _searchFilter = "";

    private void AddItem()
    {
        Navigation.NavigateTo("/edit/" + Guid.NewGuid());
    }
}