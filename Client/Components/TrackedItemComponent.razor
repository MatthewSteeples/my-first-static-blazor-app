@using Microsoft.FluentUI.AspNetCore.Components
@using BlazorApp.Shared
@using Regular = Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Filled = Microsoft.FluentUI.AspNetCore.Components.Icons.Filled

@inject IToastService ToastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

<h3>
    @ItemToTrack.Name
    <FluentIcon Value="@(new Regular.Size24.Edit())" OnClick="edit" />

    @switch (ItemToTrack.GetStatus(DateTime.UtcNow))
    {
        case StatusEnum.AtLimit:
            <FluentIcon Value="@(new Filled.Size24.Warning())" Color="@Color.Warning" />
            break;
        case StatusEnum.OverLimit:
            <FluentIcon Value="@(new Filled.Size24.ErrorCircle())" Color="@Color.Error" />
            break;
    }

    @if (ItemToTrack.Favourite)
    {
        <FluentIcon Value="@(new Filled.Size24.Star())" OnClick="toggleFavourite" />
    }
    else
    {
        <FluentIcon Value="@(new Regular.Size24.StarOff())" OnClick="toggleFavourite" />
    }

    @if (ItemToTrack.CalculateCurrentStockLevel() <= 7 * (ItemToTrack.DefaultStockUsage ?? 1))
    {
        <FluentIcon Value="@(new Filled.Size24.Warning())" Color="@Color.Warning" />
    }
</h3>

<p>@ItemToTrack.PastOccurrences.Count instances tracked</p>
<p>Last Tracked: @LastTracked</p>
@if (ItemToTrack.Targets.Any())
{
    <p>
        Next Due: @NextDue @if (!string.IsNullOrEmpty(NextSpaced))
        {
            <span> (@NextSpaced)</span>
        }
    </p>
}

<p>
    <button class="btn btn-success" @onclick="OnClick">Track</button>
</p>

<Microsoft.FluentUI.AspNetCore.Components.FluentAccordion>

    @if (ItemToTrack.PastOccurrences.Any())
    {
        <Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem Heading="Past Occurrences">
            <ul>
                @foreach (var occurrences in ItemToTrack.PastOccurrences.TakeLast(showHistoryCount).ToLookup(a => a.ActualTimestamp.ToLocalTime().Date).OrderByDescending(a => a.Key))
                {
                    <li>
                        <strong>@occurrences.Key.ToShortDateString()</strong>
                        <ol>
                            @foreach (var occurrence in occurrences.OrderByDescending(a => a.ActualTimestamp))
                            {
                                <li>@occurrence.ActualTimestamp.ToLocalTime().ToShortTimeString()</li>
                            }
                        </ol>
                    </li>
                }
            </ul>
            <button class="btn btn-primary" @onclick="() => showHistoryCount += 5">Show More</button>
        </Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem>
    }

    @if (ItemToTrack.Targets.Any())
    {
        <Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem Heading="Next Occurrences">
            <ol>
                @foreach (var occurrence in ItemToTrack.GetFutureOccurrences(DateTime.UtcNow, showFutureCount))
                {
                    <li>@occurrence.ToLocalTime().ToString("g")</li>
                }
            </ol>
            <button class="btn btn-primary" @onclick="() => showFutureCount += 5">Show More</button>
        </Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem>
    }

</Microsoft.FluentUI.AspNetCore.Components.FluentAccordion>

@code {
    async void OnClick()
    {
        ItemToTrack.AddOccurrence(DateTime.UtcNow);
        await localStorage.SetItemAsync(nameof(TrackedItem) + ItemToTrack.Id, ItemToTrack);

        ToastService.ShowToast(ToastIntent.Success, "Tracked " + ItemToTrack.Name, 5000, "Edit Time", EventCallback.Factory.Create<ToastResult>(this, e => edit()));
    }

    void edit()
    {
        Navigation.NavigateTo("/edit/" + ItemToTrack.Id);
    }

    async void toggleFavourite()
    {
        ItemToTrack.Favourite = !ItemToTrack.Favourite;
        await localStorage.SetItemAsync(nameof(TrackedItem) + ItemToTrack.Id, ItemToTrack);
    }

    private int showHistoryCount = 5;
    private int showFutureCount = 5;

    [Parameter]
    public TrackedItem ItemToTrack { get; set; }

    public string LastTracked
    {
        get
        {
            if (ItemToTrack.PastOccurrences.Any())
            {
                var max = ItemToTrack.PastOccurrences.Select(a => a.ActualTimestamp).Max().ToLocalTime();
                return max.ToRelativeDateString();
            }

            return "Never";
        }
    }

    private DateTime getNextDueTime(DateTime utcNow)
    {
        return ItemToTrack
            .GetFutureOccurrences(utcNow, 1)
            .FirstOrDefault(utcNow);
    }

    public string NextDue
    {
        get
        {
            var utcNow = DateTime.UtcNow;

            return getNextDueTime(utcNow)
                .ToLocalTime()
                .ToRelativeDateString(utcNow.ToLocalTime());
        }
    }

    public string NextSpaced
    {
        get
        {
            var utcNow = DateTime.UtcNow;

            var nextSpaced = ItemToTrack
                .GetFutureSpacedOccurrences(utcNow, 1)
                .FirstOrDefault(utcNow)
                .ToLocalTime()
                .ToRelativeDateString(getNextDueTime(utcNow).ToLocalTime());

            if (nextSpaced == DateTimeHelper.Now)
            {
                return string.Empty;
            }

            return nextSpaced;
        }
    }
}
