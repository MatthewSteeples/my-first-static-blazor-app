@using Microsoft.FluentUI.AspNetCore.Components
@using BlazorApp.Shared

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

<h3>
    @ItemToTrack.Name
    <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" OnClick="edit" />

    @switch (ItemToTrack.GetStatus(DateTime.UtcNow))
    {
        case StatusEnum.AtLimit:
            <FluentIcon Value="@(new Icons.Filled.Size24.Warning())" Color="@Color.Warning" />
            break;
        case StatusEnum.OverLimit:
            <FluentIcon Value="@(new Icons.Filled.Size24.ErrorCircle())" Color="@Color.Error" />
            break;
    }

</h3>

<p>@ItemToTrack.PastOccurrences.Count instances tracked</p>
<p>Last Tracked: @LastTracked</p>
@if (ItemToTrack.Targets.Any())
{
    <p>Next Due: @ItemToTrack.GetFutureOccurrences(DateTime.UtcNow, 1).FirstOrDefault(DateTime.UtcNow).ToRelativeDateString()</p>
}

<p>
    <button class="btn btn-success" @onclick="OnClick">Track</button>
</p>

<Microsoft.FluentUI.AspNetCore.Components.FluentAccordion>
    @if (ItemToTrack.PastOccurrences.Any())
    {
        <Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem Heading="Past Occurrences">
            <ul>
                @foreach (var occurrences in ItemToTrack.PastOccurrences.TakeLast(showHistoryCount).ToLookup(a => a.ActualTimestamp.Date).OrderByDescending(a => a.Key))
                {
                    <li>
                        <strong>@occurrences.Key.ToShortDateString()</strong>
                        <ol>
                            @foreach (var occurrence in occurrences.OrderByDescending(a => a.ActualTimestamp))
                            {
                                <li>@occurrence.ActualTimestamp.ToShortTimeString()</li>
                            }

                        </ol>
                    </li>
                }
            </ul>
            <button class="btn btn-primary" @onclick="() => showHistoryCount += 5">Show More</button>

        </Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem>
    }

    <Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem Heading="Next Occurrences">
        <ol>
            @foreach (var occurrence in ItemToTrack.GetFutureOccurrences(DateTime.UtcNow, showFutureCount))
            {
                <li>@occurrence.ToString("g")</li>
            }
        </ol>
        <button class="btn btn-primary" @onclick="() => showFutureCount += 5">Show More</button>
    </Microsoft.FluentUI.AspNetCore.Components.FluentAccordionItem>

</Microsoft.FluentUI.AspNetCore.Components.FluentAccordion>

@code {
    async void OnClick()
    {
        ItemToTrack.AddOccurrence(DateTime.UtcNow);
        await localStorage.SetItemAsync(nameof(TrackedItem) + ItemToTrack.Id, ItemToTrack);
    }

    void edit()
    {
        Navigation.NavigateTo("/edit/" + ItemToTrack.Id);
    }

    private int showHistoryCount = 5;
    private int showFutureCount = 5;

    [Parameter]
    public TrackedItem ItemToTrack { get; set; }

    public string LastTracked
    {
        get
        {
            if (ItemToTrack.PastOccurrences.Any())
            {
                var max = ItemToTrack.PastOccurrences.Select(a => a.ActualTimestamp).Max();
                return max.ToRelativeDateString();
            }

            return "Never";
        }
    }
}
