@using System.IO
@using BlazorApp.Shared
@using System.Text

@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@*Taken from https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-8.0#download-from-a-stream*@

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = fileName ?? '';
      anchorElement.click();
      anchorElement.remove();
      URL.revokeObjectURL(url);
    }
</script>

<button class="btn btn-info" @onclick="DownloadFileFromStream">Export</button>

@code {
    private async Task<Stream> GetFileStream()
    {
        var items = new List<string>();

        var keys = (await localStorage.KeysAsync()).Where(a => a.StartsWith(nameof(TrackedItem)));

        foreach (var key in keys)
        {
            var item = await localStorage.GetItemAsStringAsync(key);

            if (!string.IsNullOrEmpty(item))
                items.Add(item);
        }

        var bigString = "[" + string.Join(", ", items) + "]";

        byte[] byteArray = Encoding.UTF8.GetBytes(bigString);
        return new MemoryStream(byteArray);
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = await GetFileStream();
        var fileName = "tracker.json";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}